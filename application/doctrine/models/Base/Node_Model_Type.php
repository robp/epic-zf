<?php

/**
 * Node_Model_Base_Type
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $class
 * @property string $title
 * @property boolean $hasTitle
 * @property string $titleLabel
 * @property boolean $hasBody
 * @property string $bodyLabel
 * @property string $description
 * @property Doctrine_Collection $Vocabularies
 * @property Doctrine_Collection $Nodes
 * @property Path_Model_TypeRoute $Path
 * @property Doctrine_Collection $Taxonomy_Model_VocabularyNodetype
 * 
 * @package    EPIC
 * @subpackage ##SUBPACKAGE##
 * @author     Rob Pinciuc <rob@pinciuc.com>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class Node_Model_Base_Type extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('nodetype');
        $this->hasColumn('name', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => '40',
             ));
        $this->hasColumn('class', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('title', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('hasTitle', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('titleLabel', 'string', 80, array(
             'type' => 'string',
             'default' => 'Title',
             'length' => '80',
             ));
        $this->hasColumn('hasBody', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('bodyLabel', 'string', 80, array(
             'type' => 'string',
             'default' => 'Body',
             'length' => '80',
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Taxonomy_Model_Vocabulary as Vocabularies', array(
             'refClass' => 'Taxonomy_Model_VocabularyNodetype',
             'local' => 'nodetype_id',
             'foreign' => 'vocabulary_id'));

        $this->hasMany('Node_Model_Node as Nodes', array(
             'local' => 'name',
             'foreign' => 'type'));

        $this->hasOne('Path_Model_TypeRoute as Path', array(
             'local' => 'id',
             'foreign' => 'nodetype_id'));

        $this->hasMany('Taxonomy_Model_VocabularyNodetype', array(
             'local' => 'id',
             'foreign' => 'nodetype_id'));
    }
}