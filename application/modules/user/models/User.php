<?php

/**
 * User_Model_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    EPIC
 * @subpackage User
 * @author     Rob Pinciuc <rob@pinciuc.com>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class User_Model_User extends User_Model_Base_User
{
    const E_AUTH_NOT_FOUND = 1;
    const E_AUTH_PASSWORD_MISMATCH = 2;
    const E_AUTH_STATUS_DISABLED = 3;
    const E_AUTH_STATUS_CONFIRM = 4;
    
    const STATUS_CONFIRM = 0;
    const STATUS_ACTIVE = 1;
    const STATUS_DISABLED = 2;
    
    public static function authenticate($username, $password) {
        $md5_pass = md5($password);
        $user = Doctrine_Core::getTable('User_Model_User')->findOneByUsername($username);

        if (!$user) {
            throw new Exception(self::E_AUTH_NOT_FOUND);
        }

        if ($user->password != $md5_pass) {
            throw new Exception(self::E_AUTH_PASSWORD_MISMATCH);
        }

        if ($user->status == User_Model_User::STATUS_DISABLED) {
            throw new Exception(self::E_AUTH_STATUS_DISABLED);
        }

        if ($user->status == User_Model_User::STATUS_CONFIRM) {
            throw new Exception(self::E_AUTH_STATUS_CONFIRM);
        }
        
        return $user->id; //toArray();
    }
    
    public function getUrl()
    {
        $front  = Zend_Controller_Front::getInstance();
        $router = $front->getRouter(); // returns a rewrite router by default

        $route = $router->getRoute('userViewOther');
        $url = $route->assemble(array('identifier' => $this->username));

        return $url;
    }
    
    public static function getStatusName($code)
    {
        switch ($code) {
            case self::STATUS_CONFIRM:
                return 'Awaiting Confirmation';
                break;
            case self::STATUS_ACTIVE:
                return 'Active';
                break;
            case self::STATUS_DISABLED:
                return 'Disabled';
                break;
            default:
                return 'Unknown';
                break;
        }
    }

    public function isAllowed($resource, $privilege = NULL) {
        $acl = Zend_Registry::get('acl');
        $allowed = FALSE;
        
        if (!$privilege) {
            $privilege = $resource;
        }
        else {
            if (is_string($resource)) {
                $resource = User_Model_Resource::getResourceByString($resource);
            }
            foreach ($resource->Privileges as $p) {
                if ($p->privilege == $privilege) {
                    $privilege = $p;
                    break;
                }
            }
        }
        
        foreach ($this->Roles as $role) {
            if ($acl->isAllowed($role, $privilege->Resource, $privilege->privilege)) {
                $allowed = TRUE;
                break;
            }
        }
        
        return $allowed;
    }
}
